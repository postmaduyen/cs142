{"ast":null,"code":"var _jsxFileName = \"/home/quan/project6_photoSharing/frontend/src/components/UserPhotos/index.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { Typography, Button } from \"@mui/material\";\nimport { useParams } from \"react-router-dom\";\nimport fetchModel from \"../../lib/fetchModelData\";\nimport CommentCustom from \"../CustomComment\";\nimport \"./styles.css\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction UserPhotos(props) {\n  _s();\n  const user = props.user;\n  const {\n    userId\n  } = useParams();\n  const [photos, setPhotos] = useState([]); // State to store the photo list\n  const uploadInputRef = useRef(null);\n  const fetchUserPhotos = async () => {\n    try {\n      const data = await fetchModel(`photo/${userId}`);\n      setPhotos(data); // Assuming data is an array of photos\n    } catch (error) {\n      console.error(\"Error fetching user photos:\", error);\n    }\n  };\n  useEffect(() => {\n    fetchUserPhotos();\n  }, [userId]);\n  const addComment = () => {\n    fetchUserPhotos(); // Refetch photos after comment addition\n  };\n  const handleAddPhoto = event => {\n    event.preventDefault();\n    if (uploadInputRef.current && uploadInputRef.current.files.length > 0) {\n      const formData = new FormData();\n      formData.append(\"uploadedphoto\", uploadInputRef.current.files[0]);\n      axios.post(`http://localhost:8081/api/photo/new/${user._id}`, formData).then(res => {\n        console.log(res);\n      }).catch(err => console.error(\"POST ERR:\", err));\n    }\n    console.log(\"Add photo button clicked\");\n  };\n  if (photos.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No photos found for this user.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"user-photos-container\",\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body1\",\n      children: [\"User Photos for User ID: \", userId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), props.user._id === userId && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"image/*\",\n        ref: uploadInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: handleAddPhoto,\n        style: {\n          marginBottom: \"20px\"\n        },\n        children: \"Add Photo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this), photos.map(photo => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"photo-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: `http://localhost:8081/api/photo/images/${photo.file_name}`,\n        alt: `Photo by user ${userId}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"photo-details\",\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          children: [\"Time: \", photo.date_time]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          children: \"Comments\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"comments-section\",\n          children: photo.comments.map(comment => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"comment-item\",\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              children: [\"Comment: \", comment.comment]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              children: [\"Time: \", comment.date_time]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 19\n            }, this)]\n          }, comment._id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(CommentCustom, {\n          photo_id: photo._id,\n          user: user,\n          addComment: addComment\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this)]\n    }, photo._id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n_s(UserPhotos, \"P0S+bY2JzlTOWTPXBHyk1wrQNuI=\", false, function () {\n  return [useParams];\n});\n_c = UserPhotos;\nexport default UserPhotos;\nvar _c;\n$RefreshReg$(_c, \"UserPhotos\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Typography","Button","useParams","fetchModel","CommentCustom","axios","jsxDEV","_jsxDEV","UserPhotos","props","_s","user","userId","photos","setPhotos","uploadInputRef","fetchUserPhotos","data","error","console","addComment","handleAddPhoto","event","preventDefault","current","files","length","formData","FormData","append","post","_id","then","res","log","catch","err","children","fileName","_jsxFileName","lineNumber","columnNumber","className","variant","type","accept","ref","color","onClick","style","marginBottom","map","photo","src","file_name","alt","date_time","comments","comment","photo_id","_c","$RefreshReg$"],"sources":["/home/quan/project6_photoSharing/frontend/src/components/UserPhotos/index.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { Typography, Button } from \"@mui/material\";\nimport { useParams } from \"react-router-dom\";\nimport fetchModel from \"../../lib/fetchModelData\";\nimport CommentCustom from \"../CustomComment\";\nimport \"./styles.css\";\nimport axios from \"axios\";\nfunction UserPhotos(props) {\n  const user = props.user;\n  const { userId } = useParams();\n  const [photos, setPhotos] = useState([]); // State to store the photo list\n  const uploadInputRef = useRef(null);\n  const fetchUserPhotos = async () => {\n    try {\n      const data = await fetchModel(`photo/${userId}`);\n      setPhotos(data); // Assuming data is an array of photos\n    } catch (error) {\n      console.error(\"Error fetching user photos:\", error);\n    }\n  };\n\n  useEffect(() => {\n    fetchUserPhotos();\n  }, [userId]);\n\n  const addComment = () => {\n    fetchUserPhotos(); // Refetch photos after comment addition\n  };\n\n  const handleAddPhoto = (event) => {\n    event.preventDefault();\n    if (uploadInputRef.current && uploadInputRef.current.files.length > 0) {\n      const formData = new FormData();\n      formData.append(\"uploadedphoto\", uploadInputRef.current.files[0]);\n      axios\n        .post(`http://localhost:8081/api/photo/new/${user._id}`, formData)\n        .then((res) => {\n          console.log(res);\n        })\n        .catch((err) => console.error(\"POST ERR:\", err));\n    }\n    console.log(\"Add photo button clicked\");\n  };\n\n  if (photos.length === 0) {\n    return <div>No photos found for this user.</div>;\n  }\n\n  return (\n    <div className=\"user-photos-container\">\n      <Typography variant=\"body1\">User Photos for User ID: {userId}</Typography>\n      {props.user._id === userId && (\n        <div>\n          <input type=\"file\" accept=\"image/*\" ref={uploadInputRef} />\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={handleAddPhoto}\n            style={{ marginBottom: \"20px\" }}\n          >\n            Add Photo\n          </Button>\n        </div>\n      )}\n      {photos.map((photo) => (\n        <div key={photo._id} className=\"photo-container\">\n          <img\n            src={`http://localhost:8081/api/photo/images/${photo.file_name}`}\n            alt={`Photo by user ${userId}`}\n          />\n          <div className=\"photo-details\">\n            <Typography variant=\"body2\">Time: {photo.date_time}</Typography>\n            <Typography variant=\"h6\">Comments</Typography>\n            <div className=\"comments-section\">\n              {photo.comments.map((comment) => (\n                <div key={comment._id} className=\"comment-item\">\n                  <Typography variant=\"body2\">\n                    Comment: {comment.comment}\n                  </Typography>\n                  <Typography variant=\"body2\">\n                    Time: {comment.date_time}\n                  </Typography>\n                </div>\n              ))}\n            </div>\n            <CommentCustom\n              photo_id={photo._id}\n              user={user}\n              addComment={addComment}\n            />\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default UserPhotos;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}