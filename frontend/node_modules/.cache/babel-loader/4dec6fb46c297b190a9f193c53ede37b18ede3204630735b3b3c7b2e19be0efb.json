{"ast":null,"code":"var _jsxFileName = \"/home/quan/project6_photoSharing/frontend/src/components/UserPhotos/index.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { Typography, Button } from \"@mui/material\";\nimport { useParams } from \"react-router-dom\";\nimport fetchModel from \"../../lib/fetchModelData\";\nimport CommentCustom from \"../CustomComment\";\nimport \"./styles.css\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction UserPhotos(props) {\n  _s();\n  const user = props.user;\n  const {\n    userId\n  } = useParams();\n  const [photos, setPhotos] = useState([]); // State to store the photo list\n  const uploadInputRef = useRef(null);\n  const fetchUserPhotos = async () => {\n    try {\n      const data = await fetchModel(`photo/${userId}`);\n      setPhotos(data); // Assuming data is an array of photos\n    } catch (error) {\n      console.error(\"Error fetching user photos:\", error);\n    }\n  };\n  const handleAddPhoto = async event => {\n    // event.preventDefault();\n    if (uploadInputRef.current && uploadInputRef.current.files.length > 0) {\n      const formData = new FormData();\n      formData.append(\"uploadedphoto\", uploadInputRef.current.files[0]);\n      try {\n        const res = await axios.post(`http://localhost:8081/api/photo/new/${user._id}`, formData);\n        console.log(res);\n      } catch (err) {\n        console.error(\"POST ERR:\", err);\n      }\n    }\n    await fetchUserPhotos();\n    console.log(\"Add photo button clicked\");\n  };\n  useEffect(() => {\n    fetchUserPhotos();\n  }, [userId]);\n  const addComment = () => {\n    fetchUserPhotos(); // Refetch photos after comment addition\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"user-photos-container\",\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body1\",\n      children: [\"User Photos for User ID: \", userId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), props.user._id === userId && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"image/*\",\n        ref: uploadInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: handleAddPhoto,\n        style: {\n          marginBottom: \"20px\"\n        },\n        children: \"Add Photo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this), photos.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No photos found for this user.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this) : photos.map(photo => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"photo-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: `http://localhost:8081/api/photo/images/${photo.file_name}`,\n        alt: `Photo by user ${userId}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"photo-details\",\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          children: [\"Time: \", photo.date_time]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          children: \"Comments\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"comments-section\",\n          children: photo.comments.map(comment => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"comment-item\",\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              children: [\"Comment: \", comment.comment]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              children: [\"Time: \", comment.date_time]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 21\n            }, this)]\n          }, comment._id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(CommentCustom, {\n          photo_id: photo._id,\n          user: user,\n          addComment: addComment\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }, this)]\n    }, photo._id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 11\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n_s(UserPhotos, \"P0S+bY2JzlTOWTPXBHyk1wrQNuI=\", false, function () {\n  return [useParams];\n});\n_c = UserPhotos;\nexport default UserPhotos;\nvar _c;\n$RefreshReg$(_c, \"UserPhotos\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Typography","Button","useParams","fetchModel","CommentCustom","axios","jsxDEV","_jsxDEV","UserPhotos","props","_s","user","userId","photos","setPhotos","uploadInputRef","fetchUserPhotos","data","error","console","handleAddPhoto","event","current","files","length","formData","FormData","append","res","post","_id","log","err","addComment","className","children","variant","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","ref","color","onClick","style","marginBottom","map","photo","src","file_name","alt","date_time","comments","comment","photo_id","_c","$RefreshReg$"],"sources":["/home/quan/project6_photoSharing/frontend/src/components/UserPhotos/index.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { Typography, Button } from \"@mui/material\";\nimport { useParams } from \"react-router-dom\";\nimport fetchModel from \"../../lib/fetchModelData\";\nimport CommentCustom from \"../CustomComment\";\nimport \"./styles.css\";\nimport axios from \"axios\";\n\nfunction UserPhotos(props) {\n  const user = props.user;\n  const { userId } = useParams();\n  const [photos, setPhotos] = useState([]); // State to store the photo list\n  const uploadInputRef = useRef(null);\n  const fetchUserPhotos = async () => {\n    try {\n      const data = await fetchModel(`photo/${userId}`);\n      setPhotos(data); // Assuming data is an array of photos\n    } catch (error) {\n      console.error(\"Error fetching user photos:\", error);\n    }\n  };\n  const handleAddPhoto = async (event) => {\n    // event.preventDefault();\n    if (uploadInputRef.current && uploadInputRef.current.files.length > 0) {\n      const formData = new FormData();\n      formData.append(\"uploadedphoto\", uploadInputRef.current.files[0]);\n      try {\n        const res = await axios.post(\n          `http://localhost:8081/api/photo/new/${user._id}`,\n          formData\n        );\n        console.log(res);\n      } catch (err) {\n        console.error(\"POST ERR:\", err);\n      }\n    }\n    await fetchUserPhotos();\n    console.log(\"Add photo button clicked\");\n  };\n\n  useEffect(() => {\n    fetchUserPhotos();\n  }, [userId]);\n  const addComment = () => {\n    fetchUserPhotos(); // Refetch photos after comment addition\n  };\n\n  return (\n    <div className=\"user-photos-container\">\n      <Typography variant=\"body1\">User Photos for User ID: {userId}</Typography>\n      {props.user._id === userId && (\n        <div>\n          <input type=\"file\" accept=\"image/*\" ref={uploadInputRef} />\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={handleAddPhoto}\n            style={{ marginBottom: \"20px\" }}\n          >\n            Add Photo\n          </Button>\n        </div>\n      )}\n      {photos.length === 0 ? (\n        <div>No photos found for this user.</div>\n      ) : (\n        photos.map((photo) => (\n          <div key={photo._id} className=\"photo-container\">\n            <img\n              src={`http://localhost:8081/api/photo/images/${photo.file_name}`}\n              alt={`Photo by user ${userId}`}\n            />\n            <div className=\"photo-details\">\n              <Typography variant=\"body2\">Time: {photo.date_time}</Typography>\n              <Typography variant=\"h6\">Comments</Typography>\n              <div className=\"comments-section\">\n                {photo.comments.map((comment) => (\n                  <div key={comment._id} className=\"comment-item\">\n                    <Typography variant=\"body2\">\n                      Comment: {comment.comment}\n                    </Typography>\n                    <Typography variant=\"body2\">\n                      Time: {comment.date_time}\n                    </Typography>\n                  </div>\n                ))}\n              </div>\n              <CommentCustom\n                photo_id={photo._id}\n                user={user}\n                addComment={addComment}\n              />\n            </div>\n          </div>\n        ))\n      )}\n    </div>\n  );\n}\n\nexport default UserPhotos;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}